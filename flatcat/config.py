from __future__ import annotations
from dataclasses import dataclass, field
from pathlib import Path
from typing import List, Optional

import sys

if sys.version_info >= (3, 11):
    import tomllib
else:
    import tomli as tomllib

DEFAULT_CONFIG = "flatcat.toml"


@dataclass
class Filters:
    include: List[str] = field(default_factory=list)
    exclude: List[str] = field(
        default_factory=lambda: [
            "**/__pycache__/**",
            "__pycache__",
            "venv/**",
            "venv",
            ".venv/**",
            ".venv",
            ".git/**",
            ".git",
            "build/**",
            "build",
            "dist/**",
            "dist",
            "node_modules/**",
            "node_modules",
            ".next",
            "*.egg-info/**",
            "*.egg-info"
        ]
    )


@dataclass
class FormatOptions:
    heading: str = "### {path}"
    fence_language_from_extension: bool = True
    preamble: str = (
        "This file was generated by flatcat.\n\n"
        "It contains a tree view of {root} and the full text contents of non-ignored files.\n"
    )


@dataclass
class Config:
    root: Path = Path(".")
    output: Path = Path("flatcat.md")
    include_tree: bool = True
    tree_depth: int = 0
    respect_gitignore: bool = True
    ignore_extensions: List[str] = field(
        default_factory=lambda: [".png", ".jpg", ".gif", ".exe", ".zip", ".pdf"]
    )
    filters: Filters = field(default_factory=Filters)
    format: FormatOptions = field(default_factory=FormatOptions)

    @classmethod
    def load(cls, path: Optional[Path]) -> "Config":
        cfg_path = path or Path(DEFAULT_CONFIG)
        if not cfg_path.exists():
            return cls()
        
        with cfg_path.open("rb") as f:
            d = tomllib.load(f)
        
        def get_nested(keys, default):
            cur = d
            for k in keys:
                cur = cur.get(k, {})
            return cur or default
        
        return cls(
            root=Path(d.get("root", ".")),
            output=Path(d.get("output", "flatcat.md")),
            include_tree=d.get("include_tree", True),
            tree_depth=d.get("tree_depth", 0),
            respect_gitignore=d.get("respect_gitignore", True),
            ignore_extensions=d.get("ignore_extensions", cls().ignore_extensions),
            filters=Filters(
                include=get_nested(["filters", "include"], []),
                exclude=get_nested(["filters", "exclude"], cls().filters.exclude),
            ),
            format=FormatOptions(
                heading=get_nested(["format", "heading"], cls().format.heading),
                fence_language_from_extension=get_nested(
                    ["format", "fence_language_from_extension"],
                    cls().format.fence_language_from_extension,
                ),
                preamble=get_nested(["format", "preamble"], cls().format.preamble),
            ),
        )
    
    def override(
            self,
            root: Optional[Path] = None,
            output: Optional[Path] = None,
            include_tree: Optional[bool] = None,
    ) -> "Config":
        if root is not None:
            self.root = root
        if output is not None:
            self.output = output
        if include_tree is not None:
            self.include_tree = include_tree
        return self
